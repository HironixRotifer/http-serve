// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/messaggio.proto

package messaggio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessaggioBillingClient is the client API for MessaggioBilling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessaggioBillingClient interface {
	ClaimMessageSending(ctx context.Context, in *ClaimMessageSendingRequest, opts ...grpc.CallOption) (MessaggioBilling_ClaimMessageSendingClient, error)
	ReportMessageDelivery(ctx context.Context, in *ReportMessageDeliveryRequest, opts ...grpc.CallOption) (MessaggioBilling_ReportMessageDeliveryClient, error)
}

type messaggioBillingClient struct {
	cc grpc.ClientConnInterface
}

func NewMessaggioBillingClient(cc grpc.ClientConnInterface) MessaggioBillingClient {
	return &messaggioBillingClient{cc}
}

func (c *messaggioBillingClient) ClaimMessageSending(ctx context.Context, in *ClaimMessageSendingRequest, opts ...grpc.CallOption) (MessaggioBilling_ClaimMessageSendingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessaggioBilling_ServiceDesc.Streams[0], "/messaggio.MessaggioBilling/ClaimMessageSending", opts...)
	if err != nil {
		return nil, err
	}
	x := &messaggioBillingClaimMessageSendingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessaggioBilling_ClaimMessageSendingClient interface {
	Recv() (*BareResponse, error)
	grpc.ClientStream
}

type messaggioBillingClaimMessageSendingClient struct {
	grpc.ClientStream
}

func (x *messaggioBillingClaimMessageSendingClient) Recv() (*BareResponse, error) {
	m := new(BareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messaggioBillingClient) ReportMessageDelivery(ctx context.Context, in *ReportMessageDeliveryRequest, opts ...grpc.CallOption) (MessaggioBilling_ReportMessageDeliveryClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessaggioBilling_ServiceDesc.Streams[1], "/messaggio.MessaggioBilling/ReportMessageDelivery", opts...)
	if err != nil {
		return nil, err
	}
	x := &messaggioBillingReportMessageDeliveryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessaggioBilling_ReportMessageDeliveryClient interface {
	Recv() (*BareResponse, error)
	grpc.ClientStream
}

type messaggioBillingReportMessageDeliveryClient struct {
	grpc.ClientStream
}

func (x *messaggioBillingReportMessageDeliveryClient) Recv() (*BareResponse, error) {
	m := new(BareResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessaggioBillingServer is the server API for MessaggioBilling service.
// All implementations must embed UnimplementedMessaggioBillingServer
// for forward compatibility
type MessaggioBillingServer interface {
	ClaimMessageSending(*ClaimMessageSendingRequest, MessaggioBilling_ClaimMessageSendingServer) error
	ReportMessageDelivery(*ReportMessageDeliveryRequest, MessaggioBilling_ReportMessageDeliveryServer) error
	mustEmbedUnimplementedMessaggioBillingServer()
}

// UnimplementedMessaggioBillingServer must be embedded to have forward compatible implementations.
type UnimplementedMessaggioBillingServer struct {
}

func (UnimplementedMessaggioBillingServer) ClaimMessageSending(*ClaimMessageSendingRequest, MessaggioBilling_ClaimMessageSendingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClaimMessageSending not implemented")
}
func (UnimplementedMessaggioBillingServer) ReportMessageDelivery(*ReportMessageDeliveryRequest, MessaggioBilling_ReportMessageDeliveryServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportMessageDelivery not implemented")
}
func (UnimplementedMessaggioBillingServer) mustEmbedUnimplementedMessaggioBillingServer() {}

// UnsafeMessaggioBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessaggioBillingServer will
// result in compilation errors.
type UnsafeMessaggioBillingServer interface {
	mustEmbedUnimplementedMessaggioBillingServer()
}

func RegisterMessaggioBillingServer(s grpc.ServiceRegistrar, srv MessaggioBillingServer) {
	s.RegisterService(&MessaggioBilling_ServiceDesc, srv)
}

func _MessaggioBilling_ClaimMessageSending_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClaimMessageSendingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessaggioBillingServer).ClaimMessageSending(m, &messaggioBillingClaimMessageSendingServer{stream})
}

type MessaggioBilling_ClaimMessageSendingServer interface {
	Send(*BareResponse) error
	grpc.ServerStream
}

type messaggioBillingClaimMessageSendingServer struct {
	grpc.ServerStream
}

func (x *messaggioBillingClaimMessageSendingServer) Send(m *BareResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MessaggioBilling_ReportMessageDelivery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReportMessageDeliveryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessaggioBillingServer).ReportMessageDelivery(m, &messaggioBillingReportMessageDeliveryServer{stream})
}

type MessaggioBilling_ReportMessageDeliveryServer interface {
	Send(*BareResponse) error
	grpc.ServerStream
}

type messaggioBillingReportMessageDeliveryServer struct {
	grpc.ServerStream
}

func (x *messaggioBillingReportMessageDeliveryServer) Send(m *BareResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MessaggioBilling_ServiceDesc is the grpc.ServiceDesc for MessaggioBilling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessaggioBilling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaggio.MessaggioBilling",
	HandlerType: (*MessaggioBillingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClaimMessageSending",
			Handler:       _MessaggioBilling_ClaimMessageSending_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportMessageDelivery",
			Handler:       _MessaggioBilling_ReportMessageDelivery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/messaggio.proto",
}
