// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	proto "httpserve/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClaimMessageSendingRequest is a mock of ClaimMessageSendingRequest interface.
type MockClaimMessageSendingRequest struct {
	ctrl     *gomock.Controller
	recorder *MockClaimMessageSendingRequestMockRecorder
}

// MockClaimMessageSendingRequestMockRecorder is the mock recorder for MockClaimMessageSendingRequest.
type MockClaimMessageSendingRequestMockRecorder struct {
	mock *MockClaimMessageSendingRequest
}

// NewMockClaimMessageSendingRequest creates a new mock instance.
func NewMockClaimMessageSendingRequest(ctrl *gomock.Controller) *MockClaimMessageSendingRequest {
	mock := &MockClaimMessageSendingRequest{ctrl: ctrl}
	mock.recorder = &MockClaimMessageSendingRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClaimMessageSendingRequest) EXPECT() *MockClaimMessageSendingRequestMockRecorder {
	return m.recorder
}

// ClaimMessageSending mocks base method.
func (m *MockClaimMessageSendingRequest) ClaimMessageSending(arg0 []*proto.MessageSendingIntent) (*proto.BareResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimMessageSending", arg0)
	ret0, _ := ret[0].(*proto.BareResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimMessageSending indicates an expected call of ClaimMessageSending.
func (mr *MockClaimMessageSendingRequestMockRecorder) ClaimMessageSending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimMessageSending", reflect.TypeOf((*MockClaimMessageSendingRequest)(nil).ClaimMessageSending), arg0)
}

// CollectionOfRequests mocks base method.
func (m *MockClaimMessageSendingRequest) CollectionOfRequests() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectionOfRequests")
}

// CollectionOfRequests indicates an expected call of CollectionOfRequests.
func (mr *MockClaimMessageSendingRequestMockRecorder) CollectionOfRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionOfRequests", reflect.TypeOf((*MockClaimMessageSendingRequest)(nil).CollectionOfRequests))
}

// NewClient mocks base method.
func (m *MockClaimMessageSendingRequest) NewClient() proto.MessaggioBillingClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClient")
	ret0, _ := ret[0].(proto.MessaggioBillingClient)
	return ret0
}

// NewClient indicates an expected call of NewClient.
func (mr *MockClaimMessageSendingRequestMockRecorder) NewClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClient", reflect.TypeOf((*MockClaimMessageSendingRequest)(nil).NewClient))
}

// SendToChannel mocks base method.
func (m *MockClaimMessageSendingRequest) SendToChannel(arg0 []*proto.MessageSendingIntent, arg1 chan *proto.BareResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendToChannel", arg0, arg1)
}

// SendToChannel indicates an expected call of SendToChannel.
func (mr *MockClaimMessageSendingRequestMockRecorder) SendToChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToChannel", reflect.TypeOf((*MockClaimMessageSendingRequest)(nil).SendToChannel), arg0, arg1)
}
